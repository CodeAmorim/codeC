#include <stdio.h>
#include <stdlib.h>

/*
Arvore binaria:
	O limite máximo de filhos de cada NÓ é 2, por isso binária;
	
	Arvore de decisao - Eurística
	Altura - distancia entre a raiz e a folha
	Arvore cheia - todos nós completos com nos nós folha
*/


typedef
struct N{
	int valor;
	struct N* FESQ;
	struct N* FDIR;
}no; // Sentido de Raiz para as folhas (lista simples)

no* novo(int x){
	no* p = (no*)malloc(sizeof(no));
	
	p->valor = x; //p na parte valor recebe x
	p->FESQ = NULL;
	p->FDIR = NULL;
	
	return p;
}

no* adicionar(no* R, int x){
	if(R == NULL)
		return novo(x);
	if(x < R->valor)
		R->FESQ = adicionar(R->FESQ, x);
	else if(x > R->valor)
		R->FDIR = adicionar(R->FDIR, x);
	else
		printf("Ja existe!\n");
	return R;
}

void menorValor(no* R){
	if(R!= NULL){
		if(R->FESQ != NULL)
			menorValor(R->FESQ);
		else
			printf("\nMenor valor: %d", R->valor);
	}
}

void mostrarCrescente(no* R){
	if(R != NULL){
		mostrarCrescente(R->FESQ);
		printf("%d\n", R->valor);
		mostrarCrescente(R->FDIR);
	}
}

void contarElementos(no* R, int* cont){
    if(R != NULL){
        (*cont)++;//ponteiro para um inteiro
        contarElementos(R->FESQ, cont);
        contarElementos(R->FDIR, cont);
    }
}

int calcularAltura(no* R){
    if(R == NULL)
        return 0;

    int alturaEsquerda = calcularAltura(R->FESQ);
    int alturaDireita = calcularAltura(R->FDIR);
    if (alturaEsquerda > alturaDireita){
        return alturaEsquerda + 1;
    }else{
        return alturaDireita + 1;
    }
}

int procurarNivel(no* R, int valor){
    if(R == NULL)
        return -1; 
        
	if(R->valor == valor){
        return 0; 
    }else if(valor < R->valor){
        int nivel = procurarNivel(R->FESQ, valor); 
        if (nivel != -1){
            return nivel + 1;
        }
    } else {
        int nivel = procurarNivel(R->FDIR, valor);
        if (nivel != -1){
            return nivel + 1;
        }
    }
    
    return -1; // Valor não encontrado
}

no* remover(no* R, int num) {
    if (R == NULL)
        return NULL;
        
    if(R != NULL){
    	if(R->valor == num){
    		if(R->FESQ != NULL){
    			no* aux = R->FESQ;
    			no* ant = R;
    			while(aux->FDIR != NULL){
    				ant = aux;
    				aux = aux->FDIR;
				}
				if(ant == R){
					aux->FDIR = R->FESQ;
					free(R);
					return aux;
				}
				ant->FDIR = aux->FESQ;
				aux->FDIR = R->FDIR;
				aux->FESQ = R->FESQ;
				free(R);
				return aux;
			}
		}
	}else if(R->FDIR != NULL){
		no* ant = R;
		no* aux = R->FDIR;
		while(aux->FESQ != NULL){
			ant = aux;
			aux = aux->FESQ;
		}
		if(ant == R){
			aux->FESQ = R->FESQ;
			free(R);
			return aux;
		}
		ant->FESQ = aux->FDIR;
		aux->FESQ = R->FESQ;
		aux->FDIR = R->FDIR;
		free(R);
		return aux;
	}
	free(R);
	return NULL;
	if(R->valor > num){
		R->FESQ = remover(R->FESQ, num);
	}
	R->FDIR = remover(R->FDIR, num);
    return R;
}





void mostrar(no* R){
	
	if(R != NULL){
		printf("%d\n", R->valor);
		mostrar(R->FESQ);
		mostrar(R->FDIR);
	}
}

int main(){
	no* R = NULL;
	int opc;
	R = adicionar(R, 10);
	R = adicionar(R, 5);
	R = adicionar(R, 8);
	R = adicionar(R, 7);
	R = adicionar(R, 9);
	R = adicionar(R, 2);
	R = adicionar(R, 1);
	R = adicionar(R, 3);
	R = adicionar(R, 4);
	R = adicionar(R, 15);
	R = adicionar(R, 14);
	
	
	do{
		system("cls");
		
		printf("\n1 - Mostrar os valores da arvore");
		printf("\n2 - Mostrar os valores em ordem crescente");
		printf("\n3 - Mostrar o menor valor");
		printf("\n4 - Contar os elementos");
		printf("\n5 - Calcular a altura da arvore");
		printf("\n6 - Procurar um valor e dizer o nivel");
		printf("\n7 - Remover um elemento");
		printf("\nDigite a opcao desejada:");
		scanf("%d", &opc);
		
		switch(opc){
			case 1:{
				printf("Valores da arvore:\n");
				mostrar(R);
				getch();
				break;
			}
			case 2:{
				printf("\nValores em ordem crescente:\n");
				mostrarCrescente(R);
				getch();
				break;
			}
			case 3:{
				menorValor(R);
				getch();
				break;
			}
			case 4:{
				int cont = 0;
   				contarElementos(R, &cont);
    			printf("Sao %d elementos ao todo\n", cont);	
    			getch();
				break;
			}
			case 5:{
				int altura = calcularAltura(R);
				printf("\nAltura da arvore: %d\n", altura);
				getch();
				break;
			}
			case 6:{
				int valor;
				printf("\nDigite um valor:");
				scanf("%d", &valor);
				int nivel = procurarNivel(R, valor);
				if (nivel != -1) {
				    printf("O valor %d foi encontrado no nivel %d\n", valor, nivel);
				} else {
				    printf("O valor %d nao foi encontrado na arvore\n", valor);
				}
				getch();
				break;
			}
			case 7:{
				int num;
				printf("\nDigite um valor a ser removido:");
				scanf("%d", &num);
				remover(R, num);
				break;
			}
			case 0:
				printf("\nSaindo...");
				break;
			default:
				printf("\nOpcao invalida!");
				getch();
				break;
		}
	}while(opc != 0);
	
	return;
}
